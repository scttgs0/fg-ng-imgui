
#include <string>

#include "imgui.h"

#define EXTERNAL_PAYLOAD_TYPE "FILES"


static void doTranslateNasal2Lua()
{
    if (ImGui::BeginPopup("TranslateNasal2Lua"))
    {
        static char buff[512] { "" };

        ImGui::Text("Translate Nasal -> Lua");
        if (buff[0]) {
            ImGui::SameLine(440.0f, 0.0f);
            ImGui::Button(" Save ");
            ImGui::SameLine(0.0f, 10.0f);
            if (ImGui::Button("Reset")) {
                buff[0] = '\0';
            }
        }
        ImGui::Separator();
        ImGui::Spacing();

        ImGui::BeginChild("trans_nasal_L", ImVec2(420, 420), true);
        if (buff[0]) {
            ImGui::PushItemWidth(400.0f);
            ImGui::TextWrapped("var abs = func(n) { n < 0 ? -n : n }\n"
                                "\n"
                                "var sgn = func(x) { x < 0 ? -1 : x > 0 }\n"
                                "var sign = sgn;\n"
                                "\n"
                                "var max = func(x) {\n"
                                "    var n = x;\n"
                                "    for (var i = 0; i < size(arg); i += 1) {\n"
                                "        if (arg[i] > n) n = arg[i];\n"
                                "    }\n"
                                "    return n;\n"
                                "}\n"
                                "\n"
                                "var min = func(x) {\n"
                                "    var n = x;\n"
                                "    for (var i = 0; i < size(arg); i += 1) {\n"
                                "        if (arg[i] < n) n = arg[i];\n"
                                "    }\n"
                                "    return n;\n"
                                "}\n"
                                "\n"
                                "var avg = func {\n"
                                "    var x = 0;\n"
                                "    for (var i = 0; i < size(arg); i += 1) {\n"
                                "        x += arg[i];\n"
                                "    }\n"
                                "    x /= size(arg);\n"
                                "    return x;\n"
                                "}\n"
                                "\n"
                                "# this follows std::clamp for argument order, as opposed to\n"
                                "# qBound which uses (min, value, max)\n"
                                "var clamp = func(value, min, max) {\n"
                                "  return (value < min) ? min : (value > max) ? max : value;\n"
                                "}\n"
                                "\n"
                                "# note - mathlib defines an fmod function (added after this was written)\n"
                                "# It uses C-library fmod(), which has different rounding behaviour to\n"
                                "# this code (eg, fmod(-5, 4) gives -1, whereas this code gives 3)\n"
                                "var mod = func(n, m) {\n"
                                "    var x = n - m * int(n/m);      # int() truncates to zero, not -Inf\n"
                                "    return x < 0 ? x + abs(m) : x; # ...so must handle negative n's\n"
                                "}\n"
                                "\n"
                                "var _iln10 = 1/ln(10);\n"
                                "var log10 = func(x) { ln(x) * _iln10 }\n"
                                "\n"
                                "var approx_eq = func (a,b, d = 0.000001) {\n"
                                "    return (abs(a-b) < d);\n"
                                "}\n");
            ImGui::PopItemWidth();
        }
        else {
            ImGui::Button("Drop file here...", ImVec2(400, 400));
            if (ImGui::BeginDragDropTarget())
            {
                if (const ImGuiPayload* payload = ImGui::AcceptDragDropPayload(EXTERNAL_PAYLOAD_TYPE))
                {
                    // static std::string input { (const char*)payload->Data };
                    // if (!ends_with(input, ".xml"))
                    //     ImGui::SetMouseCursor(ImGuiMouseCursor_NotAllowed);
                    // else
                    sprintf(buff, "File was dropped! '%s'\n", (const char*)payload->Data);
                }
            }
        }
        ImGui::EndChild();

        ImGui::SameLine(0.0f, 10.0f);

        ImGui::BeginChild("trans_nasal_R", ImVec2(420, 420), true);
        if (buff[0]) {
            ImGui::PushItemWidth(400.0f);
            ImGui::TextWrapped("-- Finds the maximum value in the given table\n"
                                "function max(x)\n"
                                "    local n = x\n"
                                "    for i = 1, #arg do\n"
                                "        if arg[i] > n then\n"
                                "            n = arg[i]\n"
                                "        end\n"
                                "    end\n"
                                "    return n\n"
                                "end\n"
                                "\n"
                                "-- Finds the minimum value in the given table\n"
                                "function min(x)\n"
                                "    local n = x\n"
                                "    for i = 1, #arg do\n"
                                "        if arg[i] < n then\n"
                                "            n = arg[i]\n"
                                "        end\n"
                                "    end\n"
                                "    return n\n"
                                "end\n"
                                "\n"
                                "-- Calculates the average of the values in the given table\n"
                                "function avg()\n"
                                "    local x = 0\n"
                                "    for i = 1, #arg do\n"
                                "        x = x + arg[i]\n"
                                "    end\n"
                                "    x = x / #arg\n"
                                "    return x\n"
                                "end\n"
                                "\n"
                                "-- Clamps the given value between the minimum and maximum values\n"
                                "-- This follows the std::clamp order of arguments, as opposed to qBound which uses (min, value, max)\n"
                                "function clamp(value, min, max)\n"
                                "    if value < min then\n"
                                "        return min\n"
                                "    elseif value > max then\n"
                                "        return max\n"
                                "    else\n"
                                "        return value\n"
                                "    end\n"
                                "end\n"
                                "\n"
                                "-- Calculates the modulus of the given numbers\n"
                                "-- Note that this implementation differs from the fmod function in the C library, which has different rounding behavior\n"
                                "function mod(n, m)\n"
                                "    local x = n - m * math.floor(n / m)\n"
                                "    if x < 0 then\n"
                                "        return x + math.abs(m)\n"
                                "    else\n"
                                "        return x\n"
                                "    end\n"
                                "end\n");
            ImGui::PopItemWidth();
        }
        ImGui::EndChild();

        if (buff[0])
            ImGui::Text(buff);
        ImGui::Spacing();

        ImGui::EndPopup();
    }
}


#include "imgui.h"

#include "TranslateLanguages.gui"
#include "TranslatePUI2ImGui.gui"
#include "TranslateNasal2Lua.gui"
#include "TranslateXml2Yaml.gui"
#include "TranslateXml2Yaml_fake.gui"


static void doMenuDebugDialogs()
{
    doTranslateLanguages();
    doTranslatePUI2ImGui();
    doTranslateNasal2Lua();
    doTranslateXml2Yaml();
    // doTranslateXml2Yaml_fake();

    if (ImGui::BeginPopup("DebugNasalConsole"))
    {
        ImGui::Text("DebugNasalConsole");
        ImGui::Separator();
        ImGui::Spacing();

        ImGui::EndPopup();
    }

    if (ImGui::BeginPopup("DebugNasalREPL"))
    {
        ImGui::Text("DebugNasalREPL");
        ImGui::Separator();
        ImGui::Spacing();

        ImGui::EndPopup();
    }

    if (ImGui::BeginPopup("DebugNasalTest"))
    {
        static char nutFile[128] { "" };

        ImGui::Text("Nasal Test");
        ImGui::Separator();
        ImGui::Spacing();

        ImGui::Text("Specify .nut file in $FG_ROOT/Nasal");
        ImGui::InputText(".nut", nutFile, sizeof(nutFile));
        ImGui::Spacing();

        ImGui::Separator();
        ImGui::Button("Run");

        ImGui::EndPopup();
    }

    if (ImGui::BeginPopup("DebugDevKeys"))
    {
        ImGui::Text("Development Keys");
        ImGui::Separator();
        ImGui::Spacing();

        ImGui::BeginTable("tableDeveloperKeys", 2, ImGuiTableFlags_BordersInnerV | ImGuiTableFlags_SizingFixedFit);
        ImGui::TableSetupColumn("Key");
        ImGui::TableSetupColumn("Description");

        {
            ImGui::TableNextRow();
            ImGui::TableNextColumn();
            ImGui::Text("Shift-F3");
            ImGui::TableNextColumn();
            ImGui::Text("load panel");
        }
        {
            ImGui::TableNextRow();
            ImGui::TableNextColumn();
            ImGui::Text("/");
            ImGui::TableNextColumn();
            ImGui::Text("open property browser");
        }
        ImGui::EndTable();

        ImGui::EndPopup();
    }

    if (ImGui::BeginPopup("DebugDevExtensions"))
    {
        static bool isEnable = true;
        static bool isSlashKey = true;
        static bool isLoopback = false;

        static int osgStatistics = 0;
        static int osgLogLevel = 0;
        static int fgLogLevel = 0;

        ImGui::Text("Configure Development Extensions");
        ImGui::Separator();
        ImGui::Spacing();

        ImGui::Checkbox("Enable development dialog widgets\n(HUD and rendering dialog)", &isEnable);
        ImGui::Checkbox("Enable '/'-key property handler\n(see $FG_ROOT/Nasal/prop_key_handler.nas)", &isSlashKey);
        ImGui::Checkbox("Local loopback of model", &isLoopback);
        ImGui::Spacing();

        ImGui::Combo("OSG statistics", &osgStatistics, "0 - Off\0");
        ImGui::Combo("OSG log level", &osgLogLevel, "Warn\0");
        ImGui::Combo("FG log level", &fgLogLevel, "Alert\0");

        ImGui::EndPopup();
    }

    if (ImGui::BeginPopup("DebugDevTest"))
    {
        ImGui::Text("DebugDevTest");
        ImGui::Separator();
        ImGui::Spacing();

        ImGui::EndPopup();
    }

    if (ImGui::BeginPopup("DebugDevTutorialMarker"))
    {
        static int markerForeAft = 0;
        static int markerLeftRight = 0;
        static int markerDownUp = 0;
        static float markerSize = 0.0f;

        ImGui::Text("Adjust Marker");
        ImGui::Separator();
        ImGui::Spacing();

        ImGui::Button("<<");
        ImGui::SameLine(0.0f, 2.0f);
        ImGui::Button("<");
        ImGui::SameLine(0.0f, 2.0f);
        ImGui::SliderInt("##markerForeAft", &markerForeAft, -100, 100, "fore/aft");
        ImGui::SameLine(0.0f, 2.0f);
        ImGui::Button(">");
        ImGui::SameLine(0.0f, 2.0f);
        ImGui::Button(">>");

        ImGui::Button("<<");
        ImGui::SameLine(0.0f, 2.0f);
        ImGui::Button("<");
        ImGui::SameLine(0.0f, 2.0f);
        ImGui::SliderInt("##markerLeftRight", &markerLeftRight, -100, 100, "left/right");
        ImGui::SameLine(0.0f, 2.0f);
        ImGui::Button(">");
        ImGui::SameLine(0.0f, 2.0f);
        ImGui::Button(">>");

        ImGui::Button("<<");
        ImGui::SameLine(0.0f, 2.0f);
        ImGui::Button("<");
        ImGui::SameLine(0.0f, 2.0f);
        ImGui::SliderInt("##markerDownUp", &markerDownUp, -90, 90, "down/up");
        ImGui::SameLine(0.0f, 2.0f);
        ImGui::Button(">");
        ImGui::SameLine(0.0f, 2.0f);
        ImGui::Button(">>");

        ImGui::Button("<<");
        ImGui::SameLine(0.0f, 2.0f);
        ImGui::Button("<");
        ImGui::SameLine(0.0f, 2.0f);
        ImGui::SliderFloat("##markerSize", &markerSize, -10.0, 10, "size");
        ImGui::SameLine(0.0f, 2.0f);
        ImGui::Button(">");
        ImGui::SameLine(0.0f, 2.0f);
        ImGui::Button(">>");

        ImGui::EndPopup();
    }

    ImGui::PushStyleColor(ImGuiCol_PopupBg, ImVec4(0.08f, 0.08f, 0.08f, 0.2f));
    if (ImGui::BeginPopup("DebugStatPerformance"))
    {
        ImGui::Button("Sort");
        ImGui::SameLine(0.0f, 50.0f);
        ImGui::PushItemWidth(80.0f);
        ImGui::LabelText("worst/average frame rate", "18/31 fps");
        ImGui::SameLine(0.0f, 50.0f);
        ImGui::LabelText("worst frame delay", "53 ms");
        ImGui::PopItemWidth();
        ImGui::Separator();
        ImGui::Spacing();

        ImGui::BeginTable("tableMonitor", 8, ImGuiTableFlags_BordersInnerV | ImGuiTableFlags_SizingFixedFit | ImGuiTableFlags_RowBg);
        ImGui::TableSetupColumn("submodule");
        ImGui::TableSetupColumn("cumulative ms");
        ImGui::TableSetupColumn("total ms");
        ImGui::TableSetupColumn("max ms");
        ImGui::TableSetupColumn("min ms");
        ImGui::TableSetupColumn("mean ms");
        ImGui::TableSetupColumn("std.dev ms");
        ImGui::TableSetupColumn("iterations");
        ImGui::TableHeadersRow();

        {
            ImGui::TableNextRow();
            ImGui::TableNextColumn();
            ImGui::Text("events");
            ImGui::TableNextColumn();
            ImGui::Text(" 502.00");
            ImGui::TableNextColumn();
            ImGui::Text("  67.00");
            ImGui::TableNextColumn();
            ImGui::Text("  23.00");
            ImGui::TableNextColumn();
            ImGui::Text("   1.00");
            ImGui::TableNextColumn();
            ImGui::Text("   2.09");
            ImGui::TableNextColumn();
            ImGui::Text("   4.07");
            ImGui::TableNextColumn();
            ImGui::Text("  32");
        }
        {
            ImGui::TableNextRow();
            ImGui::TableNextColumn();
            ImGui::Text("traffic manager");
            ImGui::TableNextColumn();
            ImGui::Text("  65.00");
            ImGui::TableNextColumn();
            ImGui::Text("   2.00");
            ImGui::TableNextColumn();
            ImGui::Text("   1.00");
            ImGui::TableNextColumn();
            ImGui::Text("   0.00");
            ImGui::TableNextColumn();
            ImGui::Text("   0.06");
            ImGui::TableNextColumn();
            ImGui::Text("   0.25");
            ImGui::TableNextColumn();
            ImGui::Text("  32");
        }
        ImGui::EndTable();

        ImGui::EndPopup();
    }
    ImGui::PopStyleColor();

    if (ImGui::BeginPopup("DebugProperties"))
    {
        ImGui::Text("Internal Properties");
        ImGui::Separator();
        ImGui::Spacing();

        ImGui::Text("Clicking '.' symbol: CTRL to toggle verbose, SHIFT to dump");
        ImGui::Separator();
        ImGui::Spacing();

        if (ImGui::TreeNode("property 1"))
        {
            ImGui::Text("property 1a");
            ImGui::Text("property 2b");

            ImGui::TreePop();
        }
        ImGui::Text("property 2");
        ImGui::Text("property 3");
        ImGui::Text("property 4");
        if (ImGui::TreeNode("property 5"))
        {
            ImGui::Text("property 5a");
            ImGui::Text("property 5b");
            ImGui::Text("property 5c");

            ImGui::TreePop();
        }

        ImGui::EndPopup();
    }

    if (ImGui::BeginPopup("DebugLogging"))
    {
        ImGui::Text("DebugLogging");
        ImGui::Separator();
        ImGui::Spacing();

        ImGui::EndPopup();
    }

    if (ImGui::BeginPopup("DebugLocalWeather"))
    {
        ImGui::Text("DebugLocalWeather");
        ImGui::Separator();
        ImGui::Spacing();

        ImGui::EndPopup();
    }

    if (ImGui::BeginPopup("DebugFG1000PFD"))
    {
        ImGui::Text("DebugFG1000PFD");
        ImGui::Separator();
        ImGui::Spacing();

        ImGui::EndPopup();
    }

    if (ImGui::BeginPopup("DebugFG1000MFD"))
    {
        ImGui::Text("DebugFG1000MFD");
        ImGui::Separator();
        ImGui::Spacing();

        ImGui::EndPopup();
    }
}

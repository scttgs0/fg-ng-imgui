
#include "imgui.h"


static void doMenuOptionsDialogs()
{
    if (ImGui::BeginPopup("OptionsRendering"))
    {
        static bool enableThrottleLimit = false;
        static bool enableWideScreen = false;
        static bool enableTextureCache = false;
        static bool enablePointLights = false;
        static bool enableTriLights = false;
        static bool enableJetways = true;
        static bool enablePhotoscenery = false;
        static bool enableWireframe = false;
        static bool enableCustom = false;
        static bool enableWS3 = false;

        static int maxObjects = 5;
        static int evelationDelta = 0;

        ImGui::Text("Rendering Options");
        ImGui::Separator();

        ImGui::Checkbox("Throttle frame rate", &enableThrottleLimit);
        ImGui::Checkbox("Compensate for wide screens", &enableWideScreen);
        ImGui::Checkbox("Texture Cache", &enableTextureCache);
        ImGui::Checkbox("Runway lights as points", &enablePointLights);
        ImGui::Checkbox("Directional lights as triangles", &enableTriLights);
        ImGui::Checkbox("Animated jetways", &enableJetways);
        ImGui::Checkbox("Satellite Photoscenery", &enablePhotoscenery);
        ImGui::Checkbox("Wireframe", &enableWireframe);
        ImGui::Spacing();
        ImGui::SliderInt("Maximum number of aircraft / scenery tiles", &maxObjects, 1, 100, "%d00 objects");
        ImGui::Spacing();

        ImGui::Separator();
        if (ImGui::Button("Advanced Options")) {
            ImGui::OpenPopup("AdvancedOptions");
        }
        ImGui::SameLine();
        ImGui::Checkbox("Custom", &enableCustom);
        ImGui::Spacing();

        ImGui::Separator();
        ImGui::Checkbox("WS3.0 (Experimental - requires OSG 3.6)", &enableWS3);
        ImGui::SliderInt("Elevation delta below airports", &evelationDelta, 0, 20, "%d m");
        ImGui::Spacing();

        ImGui::Separator();
        ImGui::Button("Save Custom");
        ImGui::SameLine();
        if (ImGui::Button("Close"))
            ImGui::CloseCurrentPopup();

        if (ImGui::BeginPopup("AdvancedOptions"))
        {
            static int renderMode = 0;
            static int terrainQuality = 3;
            static int modelEffects = 1;
            static int waterEffects = 0;
            static int cloudDetail = 1;
            static int windEffects = 1;
            static int useOverlay = 1;
            static int antialiasing = 2;
            static int shadowQuality = 3;
            static int pointLimit = 256;
            static int spotLimit = 256;
            static int pylonMode = 1;
            static int roadMode = 1;
            static int buildingMode = 1;
            static int randomSceneryMode = 1;
            static int AutogenMode = 1;
            static int osmTreeMode = 1;
            static int shadowMode = 1;
            static int objectMode = 1;
            static int cloudRange = 50;

            static float cloudDensity = 1.0f;

            static bool useShaders = true;
            static bool dynamicLighting = true;
            static bool lightLimit = false;
            static bool useParticles = false;
            static bool usePrecipitation = true;
            static bool use3DCloud = true;

            ImGui::Text("Advanced Options");
            ImGui::Separator();

            ImGui::BeginChild("ChildL", ImVec2(450, 525));
                ImGui::SeparatorText("General");
                ImGui::RadioButton("Low Specifications", &renderMode, 0);
                ImGui::SameLine(0.0f, 10.0f);
                ImGui::Checkbox("Use shaders", &useShaders);
                ImGui::PushStyleColor(ImGuiCol_Text, ImVec4(0.6f, 0.6f, 0.6f, 1.0f));
                ImGui::TextWrapped("The Low Specifications render mode provides low quality visuals "
                    "with maximum compatibility. This setting is recommended for "
                    "users with less powerful hardware or integrated video cards.");
                ImGui::PopStyleColor();
                ImGui::Spacing();
                ImGui::RadioButton("Atmospheric Light Scattering (ALS)", &renderMode, 1);
                ImGui::PushStyleColor(ImGuiCol_Text, ImVec4(0.6f, 0.6f, 0.6f, 1.0f));
                ImGui::TextWrapped("Atmospheric Light Scattering uses a sophisticated physical "
                    "atmospheric model and several other effects to give realistic "
                    "rendering of large distances. It is recommended to run this "
                    "configuration on relatively powerful hardware.");
                ImGui::PopStyleColor();
                ImGui::Spacing();

                ImGui::Separator();
                ImGui::TextColored(ImVec4(0.8f, 0.0f, 0.0f, 1.0f), "Some of these settings can only be changed when using ALS.");
                ImGui::Spacing();

                ImGui::Combo("Terrain Quality", &terrainQuality, "Low\0Medium\0High\0Ultra\0");
                ImGui::Combo("Model Effects", &modelEffects, "Disabled\0Enabled\0");
                ImGui::Combo("Water Effects", &waterEffects, "Disabled\0Low\0High\0");
                ImGui::Combo("Clouds Detail", &cloudDetail, "Low\0High\0");
                ImGui::Combo("Wind Effects", &windEffects, "Disabled\0Enabled\0");
                ImGui::Combo("Overlay", &useOverlay, "Disabled\0Enabled\0");
                ImGui::Combo("Anti-aliasing", &antialiasing, "Disabled\0MSAA 2x\0MSAA 4x\0MSAA 8x\0");
            ImGui::EndChild();
            ImGui::SameLine(0.0f, 10.0f);
            ImGui::BeginChild("ChildR", ImVec2(500, 525));
                ImGui::SeparatorText("Shadows and Lights");
                ImGui::Combo("Shadow Quality", &shadowQuality, "Disabled\0Low\0Medium\0High\0Ultra\0");
                ImGui::Checkbox("Dynamic lighting", &dynamicLighting);
                ImGui::Checkbox("Limit the number of lights", &lightLimit);
                if (!lightLimit)
                    ImGui::BeginDisabled();
                ImGui::SliderInt("Point light limit", &pointLimit, 16, 1024, "%d max");
                ImGui::SliderInt("Spot light limit", &spotLimit, 16, 1024, "%d max");
                if (!lightLimit)
                    ImGui::EndDisabled();
                ImGui::Spacing();

                ImGui::SeparatorText("Scenery Layers");
                ImGui::Combo("Pylons and power lines", &pylonMode, "Disabled\0Basic\0Detailed\0");
                ImGui::Combo("Detailed Roads / Railways", &roadMode, "Disabled\0Enabled\0");
                ImGui::Combo("Buildings", &buildingMode, "Disabled\0Randomly Generated\0OpenStreetMap\0");
                ImGui::Combo("Random Scenery Objects", &randomSceneryMode, "Disabled\0Enabled\0");
                ImGui::Combo("Autogenerated Vegetation", &AutogenMode, "Disabled\0"
                                                                     "Ultra Low Density\0"
                                                                     "Very Low Density\0"
                                                                     "Low Density\0"
                                                                     "Medium Density\0"
                                                                     "High Density\0"
                                                                     "Very High Density\0"
                                                                     "Ultra High Density\0");
                ImGui::Combo("OpenStreetMap Trees", &osmTreeMode, "Disabled\0Enabled\0");
                ImGui::Combo("Vegetation Shadows", &shadowMode, "Disabled\0Enabled\0");
                ImGui::Combo("Scenery Objects", &objectMode, "Disabled\0Enabled\0");
                ImGui::TextColored(ImVec4(0.8f, 0.0f, 0.0f, 1.0f), "Warning: Pylons, Detailed Roads, Buildings use a lot of memory\n"
                                                                    "and disk space, and are only available in limited areas.");
                ImGui::Spacing();

                ImGui::SeparatorText("Atmospheric Effects");
                ImGui::Checkbox("Particles (smoke, dust, spray)", &useParticles);
                ImGui::Checkbox("Precipitation", &usePrecipitation);
                ImGui::Checkbox("3D clouds (required by Detailed Weather)", &use3DCloud);
                ImGui::DragFloat("Cloud density", &cloudDensity, 0.05f, 0.0f, 1.0f, "%0.2f %%");
                ImGui::SliderInt("Cloud visibility range", &cloudRange, 1, 150, "%d km");

            ImGui::EndChild();
            ImGui::Spacing();

            ImGui::Separator();
            if (ImGui::Button("Close"))
                ImGui::CloseCurrentPopup();

            ImGui::EndPopup();
        }

        ImGui::EndPopup();
    }

    if (ImGui::BeginPopup("OptionsOrbitalRendering"))
    {
        static bool showCloudLayer = true;
        static bool showCloudShadows = true;
        static bool useALS = true;
        static bool useOverlay = true;
        static bool useTerrainNormal = false;
        static bool useCloudNormal = false;

        static int visibilityRange = 33;

        static float cloudRotation = 0.0f;
        static float mieFactor = 0.005f;
        static float rayleighFactor = 0.003f;
        static float densityFactor = 0.3f;
        static float dustDensity = 0.0f;
        static float cloudCover = 1.0f;

        ImGui::Text("Earthview Orbital Rendering Options");
        ImGui::Separator();

        ImGui::Checkbox("Show cloud layer", &showCloudLayer);
        ImGui::Checkbox("Show cloud shadows", &showCloudShadows);
        ImGui::Checkbox("Automatic light scattering", &useALS);
        ImGui::Checkbox("Overlay textures", &useOverlay);
        ImGui::Checkbox("Terrain normal mapping", &useTerrainNormal);
        ImGui::Checkbox("Cloud normal mapping", &useCloudNormal);
        ImGui::Spacing();

        ImGui::SeparatorText("Cloudsphere Rotation");
        ImGui::SliderAngle("Rotation angle", &cloudRotation, 0.0f);
        ImGui::Spacing();

        ImGui::SeparatorText("Atmospheric Effects");
        ImGui::SliderFloat("Mie factor", &mieFactor, 0.0f, 0.01f, "%0.3f");
        ImGui::SliderFloat("Rayleigh factor", &rayleighFactor, 0.0f, 0.001f, "%0.5f");
        ImGui::SliderFloat("Density factor", &densityFactor, 0.0f, 1.0f, "%0.1f");
        ImGui::SliderInt("Visibility", &visibilityRange, 30, 250, "%d km");
        ImGui::SliderFloat("Relative dust density", &dustDensity, 0.0f, 1.0f, "%0.1f");
        ImGui::SliderFloat("Cloudcover", &cloudCover, 0.5f, 2.0f, "%0.1f");
        ImGui::Spacing();

        ImGui::Separator();
        if (ImGui::Button("Close"))
            ImGui::CloseCurrentPopup();

        ImGui::EndPopup();
    }

    if (ImGui::BeginPopup("OptionsView"))
    {
        static bool viewCockpit = true;
        static bool viewHelicopter = true;
        static bool viewChase = true;
        static bool viewChaseNoYaw = false;
        static bool viewTower = true;
        static bool viewTowerLookFrom = false;
        static bool viewTowerAgl = false;
        static bool viewFlyBy = true;
        static bool viewStill = false;
        static bool viewCamera = false;
        static bool viewGroundServices = false;

        static bool optionFrameRate = false;
        static bool optionFrameSpacing = false;
        static bool optionChat = true;
        static bool optionShowPopupMess = true;
        static bool optionShowPopupMouse = true;
        static bool optionShowTooltips = true;
        static bool optionShowTooltipMouse = true;
        static bool optionShow2D = false;
        static bool optionHide2DOffcenter = false;
        static bool optionHide2DNotCockpit = false;
        static bool optionHideMenu = true;
        static bool optionHideCursor = true;
        static bool optionLegacyMP = false;

        static bool markerShow = false;
        static bool markerAirport = false;
        static bool markerNavaid = false;
        static bool markerFixes = false;
        static bool markerPOI = false;
        static bool markerTraffic = false;

        static int optionChatPosition = 0;
        static int cursorHideDelay = 10;

        ImGui::Text("View Options");
        ImGui::Separator();

        ImGui::BeginChild("ChildL", ImVec2(160, 370), true);
            ImGui::Text("Select Active Views");
            ImGui::Spacing();

            ImGui::Separator();
            ImGui::SeparatorText("Standard Views");
            ImGui::Checkbox("Cockpit", &viewCockpit);
            ImGui::Checkbox("Helicopter", &viewHelicopter);
            ImGui::Checkbox("Chase", &viewChase);
            ImGui::Checkbox("Chase No-Yaw", &viewChaseNoYaw);
            ImGui::Checkbox("Tower", &viewTower);
            ImGui::Checkbox("Tower Look-From", &viewTowerLookFrom);
            ImGui::Checkbox("Tower AGL", &viewTowerAgl);
            ImGui::Checkbox("Fly-By", &viewFlyBy);
            ImGui::Checkbox("Still", &viewStill);
            ImGui::Spacing();

            ImGui::SeparatorText("Other Views");
            ImGui::Checkbox("Camera", &viewCamera);
            ImGui::Checkbox("Ground Services", &viewGroundServices);
        ImGui::EndChild();

        ImGui::SameLine(0.0f, 10.0f);

        ImGui::BeginChild("ChildM", ImVec2(320, 370), true);
            ImGui::SeparatorText("Display Options");
            ImGui::Checkbox("Show frame rate", &optionFrameRate);
            ImGui::Checkbox("Show frame spacing", &optionFrameSpacing);
            ImGui::Checkbox("Show chat messages", &optionChat);
            if (!optionChat)
                ImGui::BeginDisabled();
            ImGui::Indent();
            ImGui::PushItemWidth(100);
            ImGui::Combo("Log position", &optionChatPosition, "Default\0Left\0");
            ImGui::PopItemWidth();
            ImGui::Unindent();
            if (!optionChat)
                ImGui::EndDisabled();
            ImGui::Checkbox("Show popup messages", &optionShowPopupMess);
            ImGui::Checkbox("Show popup when cycling mouse behaviour", &optionShowPopupMouse);
            ImGui::Checkbox("Show tooltips", &optionShowTooltips);
            ImGui::Checkbox("Show tooltip on mouse press", &optionShowTooltipMouse);
            ImGui::Checkbox("Show 2D panel", &optionShow2D);
            if (!optionShow2D)
                ImGui::BeginDisabled();
            ImGui::Indent();
            ImGui::Checkbox("Hide in non-centered view", &optionHide2DOffcenter);
            ImGui::Checkbox("Hide in non-cockpit view", &optionHide2DNotCockpit);
            ImGui::Unindent();
            if (!optionShow2D)
                ImGui::EndDisabled();
            ImGui::Checkbox("Auto-hide menubar", &optionHideMenu);
            ImGui::Checkbox("Auto-hide cursor in", &optionHideCursor);
            ImGui::SameLine(0.0f, 10.0f);
            ImGui::PushItemWidth(80);
            ImGui::InputInt("sec##cursorHideDelay", &cursorHideDelay);
            ImGui::PopItemWidth();
            ImGui::Checkbox("Legacy multiplayer view selector", &optionLegacyMP);
            ImGui::Spacing();
        ImGui::EndChild();

        ImGui::SameLine(0.0f, 10.0f);

        ImGui::BeginChild("ChildR", ImVec2(160, 370), true);
            ImGui::SeparatorText("Marker Pins");
            ImGui::Checkbox("Show", &markerShow);
            ImGui::Spacing();

            if (!markerShow)
                ImGui::BeginDisabled();

            ImGui::Separator();
            ImGui::Checkbox("Airports", &markerAirport);
            ImGui::Checkbox("Navaids", &markerNavaid);
            ImGui::Checkbox("Fixes", &markerFixes);
            ImGui::Checkbox("POI", &markerPOI);
            ImGui::Spacing();

            ImGui::Separator();
            ImGui::Checkbox("Traffic", &markerTraffic);

            if (!markerShow)
                ImGui::EndDisabled();

        ImGui::EndChild();

        ImGui::EndPopup();
    }

    if (ImGui::BeginPopup("OptionsCockpit"))
    {
        static bool enableDynamicView = true;
        static bool enableViewMovement = true;
        static bool enableBlackout = true;

        static float shakeRate = 0.015f;
        static float groundRate = 1.0f;

        static float blackoutOnSet = 2.5f;
        static float blackoutComplete = 4.5f;
        static float redoutOnSet = -2.0f;
        static float redoutComplete = -4.0f;

        ImGui::Text("Cockpit View Options");
        ImGui::Separator();

        ImGui::Checkbox("Enable dynamic Cockpit View", &enableDynamicView);
        ImGui::Checkbox("Enable View Movement due to G-Force", &enableViewMovement);

        if (!enableViewMovement)
            ImGui::BeginDisabled();

        ImGui::Indent();
        ImGui::SliderFloat("m/g, Effect rate", &shakeRate, 0.0f, 0.1f, "%0.3f");
        ImGui::SliderFloat("Ground shake", &groundRate, 0.0f, 2.0f, "%0.1f");
        ImGui::Unindent();

        if (!enableViewMovement)
            ImGui::EndDisabled();

        ImGui::Checkbox("Enable Blackout and Redout due to G-Force", &enableBlackout);
        ImGui::Spacing();

        if (!enableBlackout)
            ImGui::BeginDisabled();

        ImGui::SeparatorText("Blackout");
        ImGui::SliderFloat("Onset##blackout", &blackoutOnSet, 1.0f, 15.0f, "%0.1f");
        ImGui::SliderFloat("Complete##blackout", &blackoutComplete, 1.0f, 15.0f, "%0.1f");
        ImGui::Spacing();

        ImGui::SeparatorText("Redout");
        ImGui::SliderFloat("Onset##redout", &redoutOnSet, -15.0f, -1.0f, "%0.1f");
        ImGui::SliderFloat("Complete##redout", &redoutComplete, -15.0f, -1.0f, "%0.1f");

        if (!enableBlackout)
            ImGui::EndDisabled();

        ImGui::EndPopup();
    }

    if (ImGui::BeginPopup("OptionsStereoscopic"))
    {
        static bool preserveAspect = true;
        static int stereoMode = 0;

        static float screenDistance = 0.3f;
        static float eyeSeparation = 0.05f;

        ImGui::Text("Stereoscopic View Options");
        ImGui::Separator();

        ImGui::Combo("Stereo Mode", &stereoMode, "OFF\0"
                                                 "QUAD_BUFFER\0"
                                                 "ANAGLYPHIC\0"
                                                 "HORIZONTAL_SPLIT\0"
                                                 "VERTICAL_SPLIT\0"
                                                 "LEFT_EYE\0"
                                                 "RIGHT_EYE\0"
                                                 "HORIZONTAL_INTERLACE\0"
                                                 "VERTICAL_INTERLACE\0"
                                                 "CHECKERBOARD");
        ImGui::Spacing();

        if (!stereoMode)
            ImGui::BeginDisabled();

        ImGui::SliderFloat("Screen Distance", &screenDistance, 0.1f, 10.0f, "%0.2f m");
        ImGui::SliderFloat("Eye Separation", &eyeSeparation, 0.0f, 0.2f, "%0.2f m");
        ImGui::Spacing();
        ImGui::Checkbox("Preserve aspect ratio", &preserveAspect);

        if (!stereoMode)
            ImGui::EndDisabled();

        ImGui::EndPopup();
    }

    if (ImGui::BeginPopup("OptionsVirtualReality"))
    {
        ImGui::Text("Virtual Reality Options");
        ImGui::Separator();

        ImGui::EndPopup();
    }
}

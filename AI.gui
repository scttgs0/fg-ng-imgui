
#include "imgui.h"


static void doMenuAIDialogs()
{
    if (ImGui::BeginPopup("AITrafficScenarios"))
    {
        static bool isEnabled = true;
        static bool isWake = false;
        static bool isScenario[30] { false };

        static char maxWakeRadius[8] { "5" };

        ImGui::Text("AI Traffic and Scenario Settings");
        ImGui::Separator();
        ImGui::Spacing();

        ImGui::SeparatorText("Timetable-Based AI Traffic");
        ImGui::Checkbox("Enable AI Traffic", &isEnabled);
        if (isEnabled) {
            ImGui::Checkbox("Enable AI aerodynamic wake", &isWake);
            if (isWake) {
                ImGui::PushItemWidth(50.0f);
                ImGui::InputText("Max. radius of interaction (nm)", maxWakeRadius, sizeof(maxWakeRadius));
                ImGui::PopItemWidth();
            }
        }
        ImGui::Spacing();

        ImGui::SeparatorText("Scenarios");
        ImGui::Columns(3);
        // ImGui::SetColumnWidth(0, 300.0f);
        // ImGui::SetColumnWidth(1, 300.0f);
        // ImGui::SetColumnWidth(2, 300.0f);
        ImGui::Checkbox("737 takeoff from KSFO/28L (San Francisco)", &isScenario[0]);
        ImGui::NextColumn();
        ImGui::Checkbox("Carrier: CVN-70 - USS Vinson (KSFO)", &isScenario[1]);
        ImGui::NextColumn();
        ImGui::Checkbox("KRHV aerotow demo", &isScenario[2]);
        ImGui::Columns(1);
        // HACK:
        ImGui::Text("                                                                                                                                                        ");

        ImGui::EndPopup();
    }

    if (ImGui::BeginPopup("AIAirTrafficControl"))
    {
        static char airportICAO[8] { "" };
        static const char* const freq[] { "KSFO", "KSQL", "KHAF", "KOAK", "KHWD", "KPAO", "KNUQ", "CA35", "KSJC", "KLVK", "KCCR", "KRHV", "23Q", "KDVO",
                                "CL77", "KAPC", "0Q3", "C83", "0Q9", "O69", "8Q0", "KSUU", "KTCY", "O88", "E16", "KWVI", "CA54", "KVCB"};

        ImGui::Text("Display Nearest Airport Frequencies");
        ImGui::Separator();
        ImGui::Spacing();

        for (int i = 0; i < 28; ++i) {
            if (ImGui::Button(freq[i], ImVec2(60.0f, 0.0f)))
                ImGui::OpenPopup("AirportFreqDialog");
            if ((i % 4) != 3)
                ImGui::SameLine(0.0f, 15.0f);
        }
        ImGui::Spacing();

        ImGui::PushItemWidth(80.0f);
        ImGui::InputText("Airport Identifier", airportICAO, sizeof(airportICAO));
        ImGui::PopItemWidth();
        ImGui::SameLine(0.0f, 25.0f);
        ImGui::Button("Search");

        // =====================================

        if (ImGui::BeginPopup("AirportFreqDialog"))
        {
            ImGui::Text("Airport Frequencies KSFO");
            ImGui::Separator();
            ImGui::Spacing();

            {
                ImGui::Text("GND            121.800");
                ImGui::SameLine(0.0f, 20.0f);
                ImGui::Button("COM1");
                ImGui::SameLine(0.0f, 10.0f);
                ImGui::Button("COM2");
            }
            {
                ImGui::Text("GND            128.650");
                ImGui::SameLine(0.0f, 20.0f);
                ImGui::Button("COM1");
                ImGui::SameLine(0.0f, 10.0f);
                ImGui::Button("COM2");
            }
            {
                ImGui::Text("TWR            120.500");
                ImGui::SameLine(0.0f, 20.0f);
                ImGui::Button("COM1");
                ImGui::SameLine(0.0f, 10.0f);
                ImGui::Button("COM2");
            }
            {
                ImGui::Text("ATIS           118.850");
                ImGui::SameLine(0.0f, 20.0f);
                ImGui::Button("COM1");
                ImGui::SameLine(0.0f, 10.0f);
                ImGui::Button("COM2");
            }
            {
                ImGui::Text("ATIS           135.450");
                ImGui::SameLine(0.0f, 20.0f);
                ImGui::Button("COM1");
                ImGui::SameLine(0.0f, 10.0f);
                ImGui::Button("COM2");
            }
            {
                ImGui::Text("AWOS 1         118.050");
                ImGui::SameLine(0.0f, 20.0f);
                ImGui::Button("COM1");
                ImGui::SameLine(0.0f, 10.0f);
                ImGui::Button("COM2");
            }
            {
                ImGui::Text("NORCAL APP     120.350");
                ImGui::SameLine(0.0f, 20.0f);
                ImGui::Button("COM1");
                ImGui::SameLine(0.0f, 10.0f);
                ImGui::Button("COM2");
            }
            {
                ImGui::Text("NORCAL APP     134.500");
                ImGui::SameLine(0.0f, 20.0f);
                ImGui::Button("COM1");
                ImGui::SameLine(0.0f, 10.0f);
                ImGui::Button("COM2");
            }
            {
                ImGui::Text("NORCAL APP     135.650");
                ImGui::SameLine(0.0f, 20.0f);
                ImGui::Button("COM1");
                ImGui::SameLine(0.0f, 10.0f);
                ImGui::Button("COM2");
            }
            {
                ImGui::Text("NORCAL DEP     120.900");
                ImGui::SameLine(0.0f, 20.0f);
                ImGui::Button("COM1");
                ImGui::SameLine(0.0f, 10.0f);
                ImGui::Button("COM2");
            }
            {
                ImGui::Text("NORCAL DEP     135.100");
                ImGui::SameLine(0.0f, 20.0f);
                ImGui::Button("COM1");
                ImGui::SameLine(0.0f, 10.0f);
                ImGui::Button("COM2");
            }
            {
                ImGui::Text("CLNC DEL       118.200");
                ImGui::SameLine(0.0f, 20.0f);
                ImGui::Button("COM1");
                ImGui::SameLine(0.0f, 10.0f);
                ImGui::Button("COM2");
            }
            {
                ImGui::Text("UNICOM         122.950");
                ImGui::SameLine(0.0f, 20.0f);
                ImGui::Button("COM1");
                ImGui::SameLine(0.0f, 10.0f);
                ImGui::Button("COM2");
            }
            ImGui::Spacing();

            ImGui::EndPopup();
        }

        ImGui::EndPopup();
    }

    if (ImGui::BeginPopup("AIWingman"))
    {
        static int manueverType = -1;
        static int relativeHeading = 0;

        ImGui::Text("AI Wingman Controls");
        ImGui::Separator();
        ImGui::Spacing();

        ImGui::RadioButton("Formate", &manueverType, 0);
        ImGui::RadioButton("Break Formation", &manueverType, 1);
        ImGui::RadioButton("Join", &manueverType, 2);
        ImGui::SameLine(0.0f, 160.0f);
        ImGui::SliderInt("##relativeHeading", &relativeHeading, -180, 180, "relative heading");
        ImGui::Spacing();

        ImGui::LabelText("Break Heading Degrees Relative", "%d degrees", relativeHeading);
        ImGui::LabelText("Target Heading Degrees True", "0 degrees");
        ImGui::Spacing();

        ImGui::Separator();
        ImGui::Button("Set Formation");
        ImGui::SameLine(0.0f, 20.0f);
        ImGui::Button("Apply");
        ImGui::SameLine(0.0f, 20.0f);
        ImGui::Button("Reset");
        ImGui::EndPopup();
    }

    if (ImGui::BeginPopup("AITanker"))
    {
        static int tankerType = 0;
        static int tankerSpeed = 250;
        static int contactRadius = 39;

        static bool reportRefueling = false;

        ImGui::Text("Air-to-Air Refueling Tanker");
        ImGui::Separator();
        ImGui::Spacing();

        ImGui::Combo("Tanker", &tankerType, "A330-MRTT\0");
        ImGui::LabelText("Type", "Drogue and Probe");
        ImGui::SliderInt("Speed", &tankerSpeed, 100, 350, "%d knots");
        ImGui::SliderInt("Contact radius", &contactRadius, 1, 100, "%d m");
        ImGui::Checkbox("Report refueling", &reportRefueling);
        ImGui::Spacing();

        ImGui::Separator();
        ImGui::Button("Request");
        ImGui::SameLine(0.0f, 20.0f);
        ImGui::Button("Get Position");

        ImGui::EndPopup();
    }

    if (ImGui::BeginPopup("AIJetway"))
    {
        static bool isEnabled = true;
        static bool isConnectMP = true;
        static bool isDebugMode = false;
        static bool isEditor = false;

        ImGui::Text("Jetway Settings");
        ImGui::Separator();
        ImGui::Spacing();

        ImGui::Checkbox("Enable animated jetways", &isEnabled);
        ImGui::Checkbox("Connect to multiplayer aircraft", &isConnectMP);
        ImGui::Checkbox("Debug mode", &isDebugMode);
        ImGui::Checkbox("Enable jetway editor", &isEditor);
        ImGui::SameLine(0.0f, 20.0f);
        if (!isEditor)
            ImGui::BeginDisabled();
        if (ImGui::Button("Editor"))
            ImGui::OpenPopup("JetwayEditor");
        if (!isEditor)
            ImGui::EndDisabled();
        ImGui::Spacing();

        ImGui::Separator();
        ImGui::Text("Loaded airports: KSFO");

        // =====================================

        if (ImGui::BeginPopup("JetwayEditor"))
        {
            static int i_nearfar = 0;
            static int i_leftright = 0;
            static int i_altitude = 0;
            static int i_heading = 0;
            static int i_extension = 0;
            static int i_pitch = 0;
            static int i_rotation = 0;
            static int i_entrance = 0;
            static int modelType = 0;

            static char gate[8] { "" };

            ImGui::Text("Jetway Editor");
            ImGui::Separator();
            ImGui::Spacing();

            ImGui::SliderInt("##nearfar", &i_nearfar, -100, 100, "near/far");
            ImGui::SliderInt("##leftright", &i_leftright, -100, 100, "left/right");
            ImGui::SliderInt("##altitude", &i_altitude, -100, 100, "altitude");
            ImGui::SliderInt("##heading", &i_heading, -360, 360, "heading");
            ImGui::Separator();
            ImGui::SliderInt("##extension", &i_extension, -100, 100, "extension offset");
            ImGui::SliderInt("##pitch", &i_pitch, -90, 90, "pitch offset");
            ImGui::SliderInt("##rotation", &i_rotation, -360, 360, "rotation offset");
            ImGui::SliderInt("##entrance", &i_entrance, -360, 360, "entrance offset");
            ImGui::Spacing();

            ImGui::PushItemWidth(100.0f);
            ImGui::Combo("Model", &modelType, "\0");
            ImGui::SameLine(0.0f, 20.0f);
            ImGui::Combo("Airline", &modelType, "\0");
            ImGui::Combo("Door ", &modelType, "\0");
            ImGui::SameLine(0.0f, 20.0f);
            ImGui::InputText("Gate", gate, 8);
            ImGui::PopItemWidth();
            ImGui::Spacing();

            ImGui::Separator();
            ImGui::Button("Reset", ImVec2(80.0f, 0.0f));
            ImGui::SameLine(0.0f, 20.0f);
            ImGui::Button("Export", ImVec2(80.0f, 0.0f));
            ImGui::SameLine(0.0f, 20.0f);
            ImGui::Button("STG Converter");

            ImGui::EndPopup();
        }

        ImGui::EndPopup();
    }

    if (ImGui::BeginPopup("AIObjects"))
    {
        static int aiObjectType = 0;

        ImGui::Text("Control Nearby AI Objects");
        ImGui::Separator();
        ImGui::Spacing();

        ImGui::Text("Select an AI object to bring up its own control dialog");
        ImGui::Combo("Object", &aiObjectType, "Nimitz\0");
        if (ImGui::Button("Launch")) {
            if (aiObjectType == 0)
                ImGui::OpenPopup("NimitzDialog");
        }

        // =====================================

        if (ImGui::BeginPopup("NimitzDialog"))
        {
            static int courseType = 2;

            static bool equipElevator1 = true;
            static bool equipElevator2 = false;
            static bool equipJBD1 = false;
            static bool equipJBD2 = false;
            static bool equipJBD3 = false;
            static bool equipJBD4 = false;
            static bool optionCrew = false;
            static bool optionDeckLights = false;

            ImGui::Text("USS Nimitz Controls");
            ImGui::Separator();
            ImGui::Spacing();

            ImGui::SeparatorText("Course");
            ImGui::RadioButton("Turn to launch course", &courseType, 0);
            ImGui::RadioButton("Turn to recovery course", &courseType, 1);
            ImGui::RadioButton("Turn to base course", &courseType, 2);
            ImGui::Spacing();

            ImGui::SeparatorText("Equipment");
            ImGui::Checkbox("Elevator 1", &equipElevator1);
            ImGui::SameLine(0.0f, 20.0f);
            ImGui::Checkbox("Elevator 2", &equipElevator2);
            ImGui::Checkbox("JBD 1", &equipJBD1);
            ImGui::SameLine(0.0f, 20.0f);
            ImGui::Checkbox("JBD 2", &equipJBD2);
            ImGui::SameLine(0.0f, 20.0f);
            ImGui::Checkbox("JBD 3", &equipJBD3);
            ImGui::SameLine(0.0f, 20.0f);
            ImGui::Checkbox("JBD 4", &equipJBD4);
            ImGui::Spacing();

            ImGui::SeparatorText("Options");
            ImGui::Checkbox("Enable Crew", &optionCrew);
            ImGui::SameLine(0.0f, 20.0f);
            ImGui::Checkbox("Deck lights", &optionDeckLights);
            ImGui::Spacing();

            ImGui::Separator();
            ImGui::Button("Apply", ImVec2(100.0f, 0.0f));
            ImGui::SameLine(0.0f, 20.0f);
            ImGui::Button("Reset", ImVec2(100.0f, 0.0f));
            ImGui::SameLine(0.0f, 20.0f);
            if (ImGui::Button("Cancel", ImVec2(100.0f, 0.0f)))
                ImGui::CloseCurrentPopup();

            ImGui::EndPopup();
        }

        ImGui::EndPopup();
    }
}
